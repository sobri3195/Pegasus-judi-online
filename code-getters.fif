// automatically generated from `../../src/crypto/smartcont/stdlib.fc` `../code.fc` `../getters.fc` 
PROGRAM{
  DECLPROC ~store_game
  DECLPROC get_initial_state
  DECLPROC ~load_prize
  DECLPROC ~load_participant
  DECLPROC ~load_result
  DECLPROC ~load_random_prize
  DECLPROC send_money
  DECLPROC blackjack_card_value
  DECLPROC blackjack_hand_value
  DECLPROC blackjack_is_over
  DECLPROC blackjack_check_state
  DECLPROC ~blackjack_apply_move
  DECLPROC lottery_raffle
  DECLPROC return_tickets
  DECLPROC send_message_back
  DECLPROC ~load_game_fields
  DECLPROC pack_state
  DECLPROC unpack_state
  DECLPROC recv_internal
  DECLPROC recv_external
  85143 DECLMETHOD seqno
  77822 DECLMETHOD owner_pubkey
  116643 DECLMETHOD reserved_amount
  78463 DECLMETHOD games
  70622 DECLMETHOD prizes
  70745 DECLMETHOD participants
  102812 DECLMETHOD results
  ~store_game PROC:<{
    s0 s15 XCHG
    IF:<{
      s4 PUSH
      0 EQINT
      IF:<{
        s0 s12 XCHG
        63 PUSHPOW2
        OR
      }>ELSE<{
        NIP
        s4 POP
        s5 POP
        SWAP
        DEC
        NOW
        s2 PUSH
        ADD
        s8 s9 XCHG2
        SUB
        s8 s(-1) PUXC
        ADD
        NEWDICT
        0 PUSHINT
        DUP
        s5 s12 XCHG
        s3 s10 XCHG
        s7 s5 XCHG2
        s3 s4 XCHG
        s1 s2 XCHG
      }>
    }>ELSE<{
      s0 s12 XCHG
    }>
    NEWC
    s1 s14 XCHG
    8 STU
    s1 s13 XCHG
    64 STU
    s1 s10 XCHG
    32 STU
    s1 s8 XCHG
    32 STU
    s1 s6 XCHG
    32 STU
    s1 s4 XCHG
    32 STU
    s1 s2 XCHG
    32 STU
    SWAP
    STGRAMS
    SWAP
    STGRAMS
    32 STU
    32 STU
    STDICT
    s1 s2 XCHG
    STDICT
    STDICT
    STDICT
    s0 s2 XCHG
    32 PUSHINT
    DICTUSETB
  }>
  get_initial_state PROC:<{
    DROP
    64 EQINT
    IFJMP:<{
      NEWDICT
      52 PUSHINT
      RAND
      NEWC
      8 STU
      129 PUSHINT
      ROT
      8 PUSHINT
      DICTUSETB
      52 PUSHINT
      RAND
      NEWC
      8 STU
      1 PUSHINT
      ROT
      8 PUSHINT
      DICTUSETB
      52 PUSHINT
      RAND
      NEWC
      8 STU
      2 PUSHINT
      ROT
      8 PUSHINT
      DICTUSETB
      1 PUSHINT
      2 PUSHINT
      NEWC
      8 STU
      8 STU
      8 PUSHPOW2DEC
      ROT
      8 PUSHINT
      DICTUSETB
    }>
    NEWDICT
  }>
  ~load_prize PROC:<{
    8 LDU
    64 LDU
    LDGRAMS
    32 LDU
    4 -ROLL
  }>
  ~load_participant PROC:<{
    8 LDI
    256 LDU
    LDGRAMS
    32 LDU
    LDDICT
    5 -ROLL
  }>
  ~load_result PROC:<{
    8 LDI
    256 LDU
    LDGRAMS
    32 LDU
    LDDICT
    LDGRAMS
    LDDICT
    7 -ROLL
  }>
  ~load_random_prize PROC:<{
    8 LDU
    64 LDU
    LDGRAMS
    32 LDU
    32 LDU
    32 LDU
    32 LDU
    7 -ROLL
  }>
  send_money PROC:<{
    0 PUSHINT
    DUP
    196 PUSHINT
    NEWC
    9 STU
    s1 s5 XCHG
    8 STI
    s1 s3 XCHG
    256 STU
    SWAP
    STGRAMS
    s1 s2 XCHG
    107 STU
    32 STU
    ENDC
    3 PUSHINT
    SENDRAWMSG
  }>
  blackjack_card_value PROC:<{
    2 RSHIFT#
    DUP
    8 LESSINT
    IFJMP:<{
      DUP
      2 ADDCONST
      SWAP
      2 ADDCONST
    }>
    12 LESSINT
    IFJMP:<{
      10 PUSHINT
      DUP
    }>
    1 PUSHINT
    11 PUSHINT
  }>
  blackjack_hand_value PROC:<{
    0 PUSHINT
    DUP
    UNTIL:<{
      s3 s4 PUSH2
      8 PUSHINT
      DICTUGET
      NULLSWAPIFNOT
      DUP
      IF:<{
        SWAP
        8 LDU
        DROP
        blackjack_card_value CALLDICT
        s4 s4 XCHG2
        ADD
        s2 s3 XCHG2
        ADD
      }>ELSE<{
        -ROT
        DROP
      }>
      s0 s4 XCHG
      INC
      SWAP
      NOT
      s1 s4 XCHG
    }>
    s3 POP
    s3 POP
    WHILE:<{
      2DUP
      GREATER
      s2 PUSH
      -10 ADDCONST
      s4 PUSH
      GEQ
      AND
    }>DO<{
      SWAP
      -10 ADDCONST
      SWAP
    }>
    DROP
    DUP
    -10 ADDCONST
    ROT
    LESS
  }>
  blackjack_is_over PROC:<{
    s2 POP
    s2 POP
    1 PUSHINT
    s2 s(-1) PUXC
    21 PUSHINT
    blackjack_hand_value CALLDICT
    DROP
    DUP
    21 GTINT
    IFJMP:<{
      3 BLKDROP
      -1 PUSHINT
    }>
    129 PUSHINT
    s1 s3 XCHG
    21 PUSHINT
    blackjack_hand_value CALLDICT
    DROP
    DUP
    21 GTINT
    IFJMP:<{
      3 BLKDROP
      1 PUSHINT
    }>
    s2 PUSH
    21 EQINT
    OVER
    21 EQINT
    2DUP
    AND
    IFJMP:<{
      5 BLKDROP
      2 PUSHINT
    }>
    SWAP
    IFJMP:<{
      4 BLKDROP
      1 PUSHINT
    }>
    IFJMP:<{
      3 BLKDROP
      -1 PUSHINT
    }>
    SWAP
    IFJMP:<{
      2DROP
      0 PUSHINT
    }>
    2DUP
    EQUAL
    IFJMP:<{
      2DROP
      2 PUSHINT
    }>
    GREATER
    IFJMP:<{
      1 PUSHINT
    }>
    -1 PUSHINT
  }>
  blackjack_check_state PROC:<{
    s10 s9 s0 XCHG3
    s8 s7 PUXC
    blackjack_is_over CALLDICT
    DUP
    0 GTINT
    IF:<{
      NEWDICT
      32 PUSHINT
      s2 s6 s6 PUXC2
      DICTUGET
      NULLSWAPIFNOT
      IF:<{
        ~load_prize CALLDICT
        s2 POP
        s2 POP
        s2 POP
        s9 s1 PUXC
        MUL
        1000000 PUSHINT
        DIV
        ADD
        1 PUSHINT
        NEWC
        s2 PUSH
        STGRAMS
        32 STU
        SWAP
        32 PUSHINT
        s3 s7 s7 PUXC2
        DICTUSETB
        s2 PUSH
        NEWC
        8 STI
        s10 s(-1) PUXC
        256 STU
        s0 s9 XCHG2
        STGRAMS
        s1 s6 XCHG
        32 STU
        s1 s6 XCHG
        STDICT
        s3 PUSH
        STGRAMS
        s1 s6 XCHG
        STDICT
        s0 s5 s5 XCHG3
        8 PUSHPOW2
        DICTUSETB
        s4 s3 XCHG2
        send_money CALLDICT
      }>ELSE<{
        s1 s9 XCHG
        s4 s8 XCHG
        8 BLKDROP
      }>
    }>ELSE<{
      s0 s8 XCHG
      s3 s7 XCHG
      7 BLKDROP
    }>
    SWAP
    0 EQINT
    SWAP
  }>
  ~blackjack_apply_move PROC:<{
    8 PUSHPOW2DEC
    s4 PUSH
    8 PUSHINT
    DICTUGET
    NULLSWAPIFNOT
    DROP
    8 LDU
    8 LDU
    DROP
    s2 PUSH
    IF:<{
      SWAP
      INC
      52 PUSHINT
      RAND
      NEWC
      8 STU
      SWAP
      8 PUSHINT
      s1 s7 s7 PUXC2
      DICTUSETB
      DUMPSTK
    }>ELSE<{
      s0 s5 XCHG2
    }>
    s4 s3 s4 XCPU2
    TRUE
    blackjack_is_over CALLDICT
    0 NEQINT
    s1 s2 XCHG
    AND
    IFJMP:<{
      s2 s3 XCHG
      3 BLKDROP
      FALSE
    }>
    129 PUSHINT
    s3 s(-1) PUXC
    17 PUSHINT
    blackjack_hand_value CALLDICT
    OVER
    17 LESSINT
    SWAP
    NOT
    s0 s2 XCHG
    17 EQINT
    s1 s2 XCHG
    AND
    s0 s3 XCHG
    1 PUSHINT
    AND
    s1 s3 XCHG
    AND
    IF:<{
      NIP
      TRUE
    }>ELSE<{
      SWAP
    }>
    DUP
    IF:<{
      SWAP
      INC
      52 PUSHINT
      RAND
      NEWC
      8 STU
      7 PUSHPOW2
      s2 PUSH
      ADD
      s1 s0 s4 XCHG3
      8 PUSHINT
      DICTUSETB
    }>ELSE<{
      ROT
    }>
    NEWC
    s1 s4 XCHG
    8 STU
    s1 s2 XCHG
    8 STU
    8 PUSHPOW2DEC
    3 ROLL
    8 PUSHINT
    DICTUSETB
    SWAP
  }>
  lottery_raffle PROC:<{
    -1 PUSHINT
    NEWDICT
    UNTIL:<{
      s1 s4 XCPU
      32 PUSHINT
      DICTUGETNEXT
      NULLSWAPIFNOT
      NULLSWAPIFNOT
      DUP
      IF:<{
        s0 s2 XCHG
        ~load_random_prize CALLDICT
        s5 POP
        s5 POP
        s5 POP
        s8 s(-1) PUXC
        MUL
        1000000 PUSHINT
        DIV
        ADD
        1000000 PUSHINT
        RAND
        s0 s4 XCHG2
        LEQ
        IF:<{
          NEWDICT
          -1 PUSHINT
          0 PUSHINT
          UNTIL:<{
            s1 s10 XCPU
            8 PUSHPOW2
            DICTUGETNEXT
            NULLSWAPIFNOT
            NULLSWAPIFNOT
            DUP
            IF:<{
              s0 s2 XCHG
              ~load_participant CALLDICT
              s5 POP
              NEWC
              s1 s4 XCHG
              8 STI
              s1 s2 XCHG
              256 STU
              SWAP
              STGRAMS
              s1 s(-1) PUXC
              32 STU
              s1 s2 XCHG
              STDICT
              s1 s(-1) PUXC
              32 STU
              SWAP
              8 PUSHPOW2
              s3 s6 s6 PUXC2
              DICTUSETB
              s3 s4 XCHG2
              ADD
            }>ELSE<{
              2SWAP
              DROP
            }>
            SWAP
            NOT
          }>
          NIP
          WHILE:<{
            DUP
            0 GTINT
            s4 PUSH
            0 GTINT
            AND
          }>DO<{
            1000000 PUSHINT
            RAND
            s3 PUSH
            LEQ
            IF:<{
              0 PUSHINT
              OVER
              RAND
              -1 PUSHINT
              UNTIL:<{
                s4 PUSH
                8 PUSHPOW2
                DICTUGETNEXT
                NULLSWAPIFNOT
                NULLSWAPIFNOT
                DUP
                IF:<{
                  s0 s2 XCHG
                  ~load_participant CALLDICT
                  s0 s5 XCHG
                  32 LDU
                  DROP
                  s8 s9 PUSH2
                  GEQ
                  s10 s1 PUSH2
                  ADD
                  s10 s(-1) PUXC
                  LESS
                  AND
                  IF:<{
                    s7 POP
                    s5 PUSH
                    17 s() PUSH
                    8 PUSHPOW2
                    DICTUGET
                    NULLSWAPIFNOT
                    0 PUSHINT
                    NEWDICT
                    s0 s2 XCHG
                    IF:<{
                      s2 s7 XCHG
                      7 BLKDROP
                      ~load_result CALLDICT
                      s7 POP
                    }>ELSE<{
                      s7 s0 s7 XCHG3
                      DROP
                    }>
                    0 PUSHINT
                    DUP
                    18 s() PUSH
                    s9 PUSH
                    32 PUSHINT
                    DICTUGET
                    NULLSWAPIFNOT
                    IF:<{
                      NIP
                      NIP
                      LDGRAMS
                      32 LDU
                      DROP
                    }>ELSE<{
                      DROP
                    }>
                    s0 s2 XCHG
                    17 s() PUSH
                    ADD
                    SWAP
                    17 s() PUSH
                    ADD
                    s0 s2 XCHG
                    INC
                    NEWC
                    s0 s3 XCHG2
                    STGRAMS
                    s1 s2 XCHG
                    32 STU
                    SWAP
                    32 PUSHINT
                    18 s() PUSH
                    s0 s9 s9 XCHG3
                    DICTUSETB
                    s5 PUSH
                    NEWC
                    8 STI
                    s5 s(-1) PUXC
                    256 STU
                    s4 PUSH
                    STGRAMS
                    s3 s(-1) PUXC
                    32 STU
                    s2 s(-1) PUXC
                    STDICT
                    s0 s7 XCHG2
                    STGRAMS
                    s1 s6 XCHG
                    STDICT
                    SWAP
                    8 PUSHPOW2
                    s7 s(-1) s0 PUXC2
                    s1 19 s() XCHG
                    s0 19 s() XCHG
                    DICTUSETB
                    s0 s6 XCHG
                    DEC
                    NEWC
                    s1 s4 XCHG
                    8 STI
                    s1 s2 XCHG
                    256 STU
                    SWAP
                    STGRAMS
                    s1 s14 XCHG
                    32 STU
                    STDICT
                    s1 s12 XCHG
                    32 STU
                    SWAP
                    8 PUSHPOW2
                    s12 s6 s6 PUXC2
                    DICTUSETB
                    FALSE
                  }>ELSE<{
                    s0 s5 XCHG
                    5 BLKDROP
                    s1 s4 XCHG
                    ADD
                    s3 s11 XCHG
                    s3 s5 XCHG
                    s3 s3 XCHG2
                  }>
                }>ELSE<{
                  s1 s12 XCHG
                  s6 s0 s6 XCHG3
                  DROP
                }>
                NOT
                s5 s11 XCHG
                s1 s5 XCHG
              }>
              3 BLKDROP
            }>
            s0 s3 XCHG
            DEC
            s0 s3 XCHG
            DEC
          }>
          5 BLKDROP
        }>ELSE<{
          3 BLKDROP
        }>
      }>ELSE<{
        s2 POP
      }>
      SWAP
      NOT
      s1 s2 XCHG
    }>
    s0 s4 XCHG
    4 BLKDROP
    -1 PUSHINT
    UNTIL:<{
      OVER
      8 PUSHPOW2
      DICTUGETNEXT
      NULLSWAPIFNOT
      NULLSWAPIFNOT
      DUP
      IF:<{
        s0 s2 XCHG
        ~load_result CALLDICT
        s1 s4 XCHG
        4 BLKDROP
        s3 POP
        ROT
        send_money CALLDICT
      }>ELSE<{
        s2 POP
      }>
      SWAP
      NOT
    }>
    DROP
  }>
  return_tickets PROC:<{
    -1 PUSHINT
    UNTIL:<{
      OVER
      8 PUSHPOW2
      DICTUGETNEXT
      NULLSWAPIFNOT
      NULLSWAPIFNOT
      DUP
      IF:<{
        s0 s2 XCHG
        8 LDI
        256 LDU
        LDGRAMS
        DROP
        send_money CALLDICT
      }>ELSE<{
        s2 POP
      }>
      SWAP
      NOT
    }>
    2DROP
  }>
  send_message_back PROC:<{
    0 PUSHINT
    24 PUSHINT
    NEWC
    6 STU
    s0 s8 XCHG2
    STSLICER
    ROT
    STGRAMS
    s1 s6 XCHG
    107 STU
    s1 s4 XCHG
    32 STU
    s1 s2 XCHG
    64 STU
    OVER
    -1 GTINT
    IF:<{
      32 STU
    }>ELSE<{
      NIP
    }>
    OVER
    -1 GTINT
    IF:<{
      32 STU
    }>ELSE<{
      NIP
    }>
    ENDC
    SWAP
    SENDRAWMSG
  }>
  ~load_game_fields PROC:<{
    8 LDU
    64 LDU
    32 LDU
    32 LDU
    32 LDU
    32 LDU
    32 LDU
    LDGRAMS
    LDGRAMS
    32 LDU
    32 LDU
    LDDICT
    LDDICT
    LDDICT
    LDDICT
    s0 s15 XCHG
    s0 s14 XCHG
    s0 s13 XCHG
    12 -ROLL
  }>
  pack_state PROCREF:<{
    NEWC
    s1 s4 XCHG
    32 STU
    s1 s2 XCHG
    256 STU
    SWAP
    STGRAMS
    STDICT
    ENDC
  }>
  unpack_state PROC:<{
    c4 PUSH
    CTOS
    32 LDU
    256 LDU
    LDGRAMS
    LDDICT
    ENDS
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    4 LDU
    SWAP
    1 PUSHINT
    AND
    IFJMP:<{
      3 BLKDROP
    }>
    OVER
    SEMPTY
    IFJMP:<{
      3 BLKDROP
    }>
    LDMSGADDR
    DROP
    DUP
    REWRITESTDADDR
    s0 s3 XCHG
    32 LDU
    OVER
    0 EQINT
    IFJMP:<{
      6 BLKDROP
    }>
    unpack_state CALLDICT
    s0 s4 XCHG
    64 LDU
    s6 PUSH
    100 EQINT
    IFJMP:<{
      32 LDU
      256 LDU
      32 LDU
      DROP
      s2 s7 PUSH2
      32 PUSHINT
      DICTUGET
      NULLSWAPIFNOT
      IFNOTJMP:<{
        s4 s8 XCHG
        8 BLKDROP
        s2 POP
        s3 POP
        s3 POP
        4294967294 PUSHINT
        36 PUSHINT
        0 PUSHINT
        s3 s5 XCHG
        s2 s4 XCHG
        64 PUSHINT
        send_message_back CALLDICT
      }>
      ~load_game_fields CALLDICT
      s15 POP
      s12 PUSH
      63 PUSHPOW2
      AND
      IFJMP:<{
        12 BLKDROP
        s6 s10 XCHG
        10 BLKDROP
        s2 POP
        s3 POP
        s3 POP
        4294967294 PUSHINT
        53 PUSHINT
        0 PUSHINT
        s3 s5 XCHG
        s2 s4 XCHG
        64 PUSHINT
        send_message_back CALLDICT
      }>
      s11 PUSH
      NOW
      LESS
      IFNOTJMP:<{
        12 BLKDROP
        s6 s10 XCHG
        10 BLKDROP
        s2 POP
        s3 POP
        s3 POP
        4294967294 PUSHINT
        46 PUSHINT
        0 PUSHINT
        s3 s5 XCHG
        s2 s4 XCHG
        64 PUSHINT
        send_message_back CALLDICT
      }>
      s10 PUSH
      NOW
      GREATER
      IFNOTJMP:<{
        12 BLKDROP
        s6 s10 XCHG
        10 BLKDROP
        s2 POP
        s3 POP
        s3 POP
        4294967294 PUSHINT
        47 PUSHINT
        0 PUSHINT
        s3 s5 XCHG
        s2 s4 XCHG
        64 PUSHINT
        send_message_back CALLDICT
      }>
      s13 PUSH
      63 GTINT
      IF:<{
        s15 POP
        1 PUSHINT
      }>ELSE<{
        s0 s15 XCHG
      }>
      s7 s0 PUSH2
      ADD
      s9 PUSH
      GREATER
      IF:<{
        DROP
        s7 s6 PUSH2
        SUB
      }>
      DUP
      1 LESSINT
      IFJMP:<{
        12 BLKDROP
        s6 s10 XCHG
        10 BLKDROP
        s2 POP
        s3 POP
        s3 POP
        4294967294 PUSHINT
        48 PUSHINT
        0 PUSHINT
        s3 s5 XCHG
        s2 s4 XCHG
        64 PUSHINT
        send_message_back CALLDICT
      }>
      27 s() PUSH
      OVER
      DIV
      s7 PUSH
      LESS
      IFJMP:<{
        12 BLKDROP
        s6 s10 XCHG
        10 BLKDROP
        s2 POP
        s3 POP
        s3 POP
        4294967294 PUSHINT
        49 PUSHINT
        0 PUSHINT
        s3 s5 XCHG
        s2 s4 XCHG
        64 PUSHINT
        send_message_back CALLDICT
      }>
      16 s() PUSH
      s2 PUSH
      8 PUSHPOW2
      DICTUGET
      NULLSWAPIFNOT
      s15 PUSH
      63 GTINT
      s1 s(-1) PUXC
      AND
      IFJMP:<{
        12 BLKDROP
        s8 s12 XCHG
        12 BLKDROP
        s2 POP
        s3 POP
        s3 POP
        4294967294 PUSHINT
        52 PUSHINT
        0 PUSHINT
        s3 s5 XCHG
        s2 s4 XCHG
        64 PUSHINT
        send_message_back CALLDICT
      }>
      20 s() POP
      24 s() POP
      25 s() POP
      0 PUSHINT
      s0 s13 s12 PUSH3
      get_initial_state CALLDICT
      s0 20 s() XCHG
      IF:<{
        2DROP
        17 s() POP
        22 s() POP
        23 s() POP
        s0 19 s() XCHG
        ~load_participant CALLDICT
        s5 POP
      }>ELSE<{
        s4 27 s() XCHG
        s3 25 s() XCHG
        s5 24 s() XCHG
        s2 19 s() XCHG
        4 2 REVERSE
        ROT
        DROP
      }>
      SWAP
      27 s() PUSH
      ADD
      SWAP
      25 s() PUSH
      ADD
      s1 s5 XCHG
      s0 27 s() XCHG
      ADD
      s1 s6 XCHG
      s0 24 s() XCHG
      ADD
      TRUE
      FALSE
      s13 PUSH
      0 EQINT
      IF:<{
        DROP
        s1 s7 PUSH2
        GEQ
      }>ELSE<{
        s13 PUSH
        64 EQINT
        IF:<{
          NIP
          TRUE
          s13 s(-1) s0 PUXC2
          s13 s(-1) s0 PUXC2
          s6 s(-1) s0 PUXC2
          27 s() PUSH
          SWAP
          s0 19 s() XCHG
          20 s() PUSH
          s8 s12 s10 PUSH3
          35 s() PUSH
          blackjack_check_state CALLDICT
        }>ELSE<{
          s0 s15 XCHG
        }>
        s0 s15 XCHG
      }>
      SWAP
      IF:<{
        NEWC
        s1 s3 XCHG
        8 STI
        s1 s6 XCHG
        256 STU
        s0 s3 XCHG2
        STGRAMS
        s1 24 s() XCHG
        32 STU
        s1 23 s() XCHG
        STDICT
        s0 s11 s13 XCHG3
        8 PUSHPOW2
        DICTUSETB
      }>ELSE<{
        s0 26 s() XCHG
        s1 17 s() XCHG
        s5 s15 XCHG
        s1 s6 XCHG
        6 BLKDROP
      }>
      s6 PUSH
      0 EQINT
      21 s() PUSH
      AND
      IF:<{
        s8 POP
        16 s() PUSH
        s8 PUSH
        19 s() PUSH
        lottery_raffle CALLDICT
      }>ELSE<{
        s0 s8 XCHG
      }>
      s15 17 s() XCHG
      s10 16 s() XCHG
      s15 20 s() XCHG
      s6 s14 XCHG
      s5 s13 XCHG
      s4 s12 XCHG
      s3 s11 XCHG
      s10 s9 s0 XCHG3
      s3 s8 XCHG
      s1 s7 XCHG
      s6 18 s() XCHG
      s2 s5 XCHG
      s4 19 s() XCHG
      s3 20 s() XCHG
      s2 20 s() XCHG
      SWAP
      ~store_game CALLDICT
      s3 s3 s0 XCHG3
      pack_state INLINECALLDICT
      c4 POP
    }>
    s1 s5 XCHG
    5 BLKDROP
    s2 POP
    s3 POP
    s3 POP
    OVER
    31 PUSHPOW2
    AND
    IFNOTJMP:<{
      32 PUSHPOW2DEC
      0 PUSHINT
      DUP
      s3 s5 XCHG
      s2 s4 XCHG
      64 PUSHINT
      send_message_back CALLDICT
    }>
    3 BLKDROP
  }>
  recv_external PROC:<{
    9 PUSHPOW2
    LDSLICEX
    DUP
    32 LDU
    32 LDU
    32 LDU
    NOW
    s1 s3 XCHG
    LESS
    35 THROWIF
    unpack_state CALLDICT
    s6 s3 XCPU
    EQUAL
    33 THROWIFNOT
    s0 s2 XCHG
    INC
    s3 PUSH
    101 EQINT
    IFNOT:<{
      s3 PUSH
      102 EQINT
      IF:<{
        s3 POP
        s0 s3 XCHG
        256 LDU
        s0 s6 XCHG
        HASHSU
        s0 s7 s7 XC2PU
        CHKSIGNU
        34 THROWIFNOT
        s1 s2 s0 PUSH3
        s6 PUSH
        pack_state INLINECALLDICT
        c4 POP
        COMMIT
        s0 s4 XCHG
        32 LDU
        32 LDU
        DROP
        s1 s4 PUSH2
        32 PUSHINT
        DICTUGET
        NULLSWAPIFNOT
        36 THROWIFNOT
        ~load_game_fields CALLDICT
        s15 POP
        s12 PUSH
        63 PUSHPOW2
        AND
        53 THROWIF
        21 s() PUSH
        s2 PUSH
        8 PUSHPOW2
        DICTUGET
        NULLSWAPIFNOT
        40 THROWIFNOT
        s14 PUSH
        0 EQINT
        IF:<{
          2DROP
          s14 POP
          19 s() POP
          s7 PUSH
          NOW
          LESS
          38 THROWIFNOT
          ACCEPT
          s4 s6 PUSH2
          LESS
          IF:<{
            12 BLKDROP
            s6 POP
            s0 s5 XCHG
            return_tickets CALLDICT
            s4 s2 XCHG2
            32 PUSHINT
            DICTUDELGET
            NULLSWAPIFNOT
            2DROP
          }>ELSE<{
            18 s() PUSH
            s13 s3 PUSH2
            lottery_raffle CALLDICT
            16 s() 17 s() XCHG
            s14 s15 XCHG
            TRUE
            s0 s15 XCHG
            s12 s14 XCHG
            s11 s13 XCHG
            s10 s12 XCHG
            s9 s11 XCHG
            s8 s10 XCHG
            s7 s9 XCHG
            s6 s8 XCHG
            s5 s7 XCHG
            s4 s6 XCHG
            s3 s5 XCHG
            s2 s4 XCHG
            s3 20 s() XCHG
            s0 20 s() XCHG
            ~store_game CALLDICT
            s1 s3 XCHG
          }>
        }>ELSE<{
          s14 PUSH
          64 EQINT
          IF:<{
            ACCEPT
            ~load_participant CALLDICT
            s5 POP
            s0 s4 XCHG
            18 s() PUSH
            18 s() PUSH
            22 s() PUSH
            ~blackjack_apply_move CALLDICT
            s1 21 s() XCHG
            OR
            18 s() PUSH
            s0 s2 XCHG
            18 s() PUSH
            s0 s2 XCHG
            22 s() PUSH
            s10 s2 PUXC
            s0 s9 XCHG
            30 s() PUSH
            s8 s7 s10 PUSH3
            s12 PUSH
            blackjack_check_state CALLDICT
            SWAP
            IF:<{
              NEWC
              s1 s3 XCHG
              8 STI
              256 STU
              s0 s3 XCHG2
              STGRAMS
              32 STU
              s1 16 s() XCHG
              STDICT
              s0 s2 XCHG
              s1 21 s() XCHG
              s0 21 s() XCHG
              8 PUSHPOW2
              DICTUSETB
            }>ELSE<{
              s0 s4 XCHG
              4 BLKDROP
              s15 POP
              s1 20 s() XCHG
              8 PUSHPOW2
              DICTUDELGET
              NULLSWAPIFNOT
              2DROP
            }>
            16 s() 17 s() XCHG
            s14 s15 XCHG
            FALSE
            s0 s15 XCHG
            s12 s14 XCHG
            s11 s13 XCHG
            s10 s12 XCHG
            s9 s11 XCHG
            s8 s10 XCHG
            s7 s9 XCHG
            s6 s8 XCHG
            s5 s7 XCHG
            s4 s6 XCHG
            s3 s5 XCHG
            s2 s4 XCHG
            s3 20 s() XCHG
            s1 s2 XCHG
            s0 20 s() XCHG
            ~store_game CALLDICT
          }>ELSE<{
            18 s() 22 s() XCHG
            19 s() 20 s() XCHG
            12 BLKDROP
            7 BLKDROP
          }>
          s1 s3 XCHG
        }>
      }>ELSE<{
        s0 s6 XCHG
        HASHSU
        s0 s7 s7 XC2PU
        CHKSIGNU
        34 THROWIFNOT
        s4 s5 s0 PUSH3
        s6 PUSH
        pack_state INLINECALLDICT
        c4 POP
        COMMIT
        ACCEPT
        OVER
        1 EQINT
        IF:<{
          NIP
          0 PUSHINT
          BALANCE
          UNCONS
          DROP
          s0 s3 XCHG
          WHILE:<{
            DUP
            SEMPTY
            NOT
          }>DO<{
            8 LDU
            256 LDU
            LDGRAMS
            s4 s1 XCPU
            ADD
            s6 s0 PUSH2
            SUB
            s6 s(-1) PUXC
            GEQ
            43 THROWIF
            3 -ROLL
            send_money CALLDICT
            SWAP
          }>
          s2 s3 XCHG
          3 BLKDROP
        }>ELSE<{
          OVER
          2 EQINT
          IF:<{
            NIP
            SWAP
            32 LDU
            LDREF
            DROP
            s1 s3 PUSH2
            32 PUSHINT
            DICTUGET
            NULLSWAPIFNOT
            NIP
            44 THROWIF
            CTOS
            s0 s1 s3 XCHG3
            32 PUSHINT
            DICTUSET
          }>ELSE<{
            OVER
            3 EQINT
            IF:<{
              NIP
              SWAP
              32 LDU
              DROP
              s0 s2 PUSH2
              32 PUSHINT
              DICTUGET
              NULLSWAPIFNOT
              36 THROWIFNOT
              ~load_game_fields CALLDICT
              s2 s12 XCHG
              12 BLKDROP
              s2 POP
              s2 POP
              SWAP
              63 PUSHPOW2
              AND
              IFNOT:<{
                return_tickets CALLDICT
              }>ELSE<{
                DROP
              }>
              ROT
              32 PUSHINT
              DICTUDELGET
              NULLSWAPIFNOT
              2DROP
            }>ELSE<{
              SWAP
              4 EQINT
              IF:<{
                SWAP
                LDREF
                OVER
                SETCODE
                SEMPTY
                IFNOT:<{
                  CTOS
                  BLESS
                  c3 POP
                }>ELSE<{
                  DROP
                }>
                0 THROW
              }>ELSE<{
                NIP
              }>
              SWAP
            }>
          }>
          SWAP
        }>
        -ROT
      }>
    }>ELSE<{
      s6 s7 s5 XCHG3
      s0 s4 XCHG
      4 BLKDROP
    }>
    s3 s3 s0 XCHG3
    pack_state INLINECALLDICT
    c4 POP
  }>
  seqno PROC:<{
    c4 PUSH
    CTOS
    32 PLDU
  }>
  owner_pubkey PROC:<{
    c4 PUSH
    CTOS
    32 PUSHINT
    SDSKIPFIRST
    256 LDU
    DROP
  }>
  reserved_amount PROC:<{
    c4 PUSH
    CTOS
    288 PUSHINT
    SDSKIPFIRST
    LDGRAMS
    DROP
  }>
  games PROC:<{
    c4 PUSH
    CTOS
    288 PUSHINT
    SDSKIPFIRST
    LDGRAMS
    NIP
    LDDICT
    DROP
    DUP
    ISNULL
    IFJMP:<{
      DROP
      PUSHNULL
    }>
    PUSHNULL
    31 PUSHPOW2DEC
    UNTIL:<{
      s2 PUSH
      32 PUSHINT
      DICTUGETPREV
      NULLSWAPIFNOT
      NULLSWAPIFNOT
      DUP
      IF:<{
        s0 s2 XCHG
        ~load_game_fields CALLDICT
        4 BLKDROP
        s11 POP
        s11 PUSH
        s0 s11 XCHG
        12 TUPLE
        s0 s3 XCHG2
        CONS
      }>ELSE<{
        2SWAP
        DROP
      }>
      SWAP
      NOT
      s1 s2 XCHG
    }>
    DROP
    NIP
  }>
  prizes PROC:<{
    c4 PUSH
    CTOS
    288 PUSHINT
    SDSKIPFIRST
    LDGRAMS
    NIP
    LDDICT
    DROP
    DUP
    ISNULL
    IFJMP:<{
      2DROP
      PUSHNULL
    }>
    32 PUSHINT
    DICTUGET
    NULLSWAPIFNOT
    36 THROWIFNOT
    ~load_game_fields CALLDICT
    s3 s12 XCHG
    12 BLKDROP
    NIP
    s2 POP
    PUSHNULL
    31 PUSHPOW2DEC
    UNTIL:<{
      s3 PUSH
      32 PUSHINT
      DICTUGETPREV
      NULLSWAPIFNOT
      NULLSWAPIFNOT
      DUP
      IF:<{
        0 PUSHINT
        s0 s0 s5 PUSH3
        64 LESSINT
        IF:<{
          3 BLKDROP
          s0 s2 XCHG
          ~load_random_prize CALLDICT
          s7 POP
        }>ELSE<{
          s0 s5 XCHG
          ~load_prize CALLDICT
          s4 POP
          s6 s8 XCHG
          3 3 BLKSWAP
          -ROT
        }>
        s7 PUSH
        s0 s7 XCHG
        8 TUPLE
        s0 s3 XCHG2
        CONS
      }>ELSE<{
        2SWAP
        DROP
      }>
      SWAP
      NOT
      s1 s2 XCHG
    }>
    s1 s3 XCHG
    3 BLKDROP
  }>
  participants PROC:<{
    c4 PUSH
    CTOS
    288 PUSHINT
    SDSKIPFIRST
    LDGRAMS
    NIP
    LDDICT
    DROP
    DUP
    ISNULL
    IFJMP:<{
      2DROP
      PUSHNULL
    }>
    32 PUSHINT
    DICTUGET
    NULLSWAPIFNOT
    36 THROWIFNOT
    ~load_game_fields CALLDICT
    s2 s12 XCHG
    12 BLKDROP
    s0 s3 XCHG
    3 BLKDROP
    PUSHNULL
    256 PUSHPOW2DEC
    UNTIL:<{
      s2 PUSH
      8 PUSHPOW2
      DICTUGETPREV
      NULLSWAPIFNOT
      NULLSWAPIFNOT
      DUP
      IF:<{
        s0 s2 XCHG
        ~load_participant CALLDICT
        DROP
        s4 POP
        s4 PUSH
        s0 s4 XCHG
        5 TUPLE
        s0 s3 XCHG2
        CONS
      }>ELSE<{
        2SWAP
        DROP
      }>
      SWAP
      NOT
      s1 s2 XCHG
    }>
    DROP
    NIP
  }>
  results PROC:<{
    c4 PUSH
    CTOS
    288 PUSHINT
    SDSKIPFIRST
    LDGRAMS
    NIP
    LDDICT
    DROP
    DUP
    ISNULL
    IFJMP:<{
      2DROP
      PUSHNULL
    }>
    32 PUSHINT
    DICTUGET
    NULLSWAPIFNOT
    36 THROWIFNOT
    ~load_game_fields CALLDICT
    s1 s12 XCHG
    12 BLKDROP
    s0 s3 XCHG
    3 BLKDROP
    PUSHNULL
    256 PUSHPOW2DEC
    UNTIL:<{
      s2 PUSH
      8 PUSHPOW2
      DICTUGETPREV
      NULLSWAPIFNOT
      NULLSWAPIFNOT
      DUP
      IF:<{
        s0 s2 XCHG
        ~load_result CALLDICT
        DROP
        NIP
        s5 POP
        s5 PUSH
        s0 s5 XCHG
        6 TUPLE
        s0 s3 XCHG2
        CONS
      }>ELSE<{
        2SWAP
        DROP
      }>
      SWAP
      NOT
      s1 s2 XCHG
    }>
    DROP
    NIP
  }>
}END>c
