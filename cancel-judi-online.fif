#!/usr/bin/env fift -s
"gamble-utils.fif" include

{ ."<contract> <seqno> <game-id> [-O <output-boc>]" cr
  ."Cancels a game <game-id>, with address loaded from file <contract>.addr "
  ."and private key from <contract>.pk, and saves it into <output-boc>.boc ('<contract>-query.boc' by default)." cr
} : usage()

// == Parsing command-line arguments

{
  "-O" "--output-file" 1 { =: SaveFile } option-long()

  1 { =: BaseFile } nth-argument()
  2 { parse-int =: SeqNo } nth-argument()
  3 { parse-int =: GameId } nth-argument()
} scan-args()
3 < { show-usage() } if // Checks that there's enough arguments

// == End of parsing command-line arguments

BaseFile +"-query" =:? SaveFile
BaseFile +".addr" load-address
2dup 2constant ContractAddr
."Contract address = " 2dup .addr cr 6 .Addr cr

BaseFile +".pk" load-keypair
=: PrivateKey
=: PublicKey

."Cancelling game #" GameId . cr

// Pack the internal message into a request data structure to be signed
<b
  SeqNo 32 u,   // seqno
  -1 32 i,      // valid_until
  3 32 u,       // action, 3 = cancel game
  GameId 32 u,
b> =: MessageBody

."Signing message: " MessageBody <s csr. cr

ContractAddr null
  MessageBody PrivateKey sign-message()
external-message() =: ExtMessage

."New external message: " ExtMessage <s csr. cr
ExtMessage 2 boc+>B dup Bx. cr
SaveFile +".boc" tuck B>file
."(Saved to file " type .")" cr