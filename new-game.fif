#!/usr/bin/env fift -s
"gamble-utils.fif" include

{ ."<contract> <seqno> <game-id> <game-type> [<options>] [-O <output-boc>]" cr
  ."Starts a new game via a smart contract created by init.fif, with address loaded from file <contract>.addr "
  ."and private key from <contract>.pk, and saves it into <output-boc>.boc ('<contract>-query.boc' by default)." cr
  ."<seqno> is the current seqno value of the contract," cr
  ."<game-id> is an arbitrary game id (a 32 bit number, must be unique among active and upcoming games)," cr
  ."<game-type> is game type; currently two types are supported:" cr
  ."  0: A lottery/slot-machine," cr
  ."  64: Blackjack," cr cr
  ."Additional options are:" cr
  ."-f <game-flags> Game-specific flags," cr
  ."  For Blackjack, flag 1 indicates that the 'hit on soft 17' rule should be active," cr
  ."-s <start-time> Unixtime when the game starts," cr
  ."-e <end-time> Unixtime when the game ends," cr
  ."-n <min-tickets> Minimum amount of tickets required for this game to be conducted," cr
  ."-x <max-tickets> Amount of tickets, that triggers the game," cr
  ."-t <ticket-price> Price of a single ticket in Grams," cr
  ."-i <initial-fund> Initial size of a prize fund (will be increased by the total cost of all tickets sold)," cr
  ."-c <repeat-count> Number of times this game should be automatically repeated," cr
  ."-d <repeat-delay> Delay in seconds between game repeats," cr
  ."-p <prize-id> <fixed-amount> <prize-fund-percent>" cr
  ."  Defines a prize with id <prize-id>, fixed value of <fixed-amount> Grams plus a <prize-fund-percent> (0.0-100.0) part of prize fund." cr
  ."-l <prize-id> <fixed-amount> <prize-fund-percent> <per-prize-probability> <ticket-count> <per-ticket-probability>" cr
  ."  Defines a prize in a lottery (see -p option above). The probability of giving out this prize at all is <per-prize-probability> (0.0-100.0);"
  ." number of tickets that can possibly receive it is <ticket-count>,"
  ." and probability to receive it for each ticket is <per-ticket-probability> (0.0-100.0)." cr cr
  ."Option -l can be used multiple times to define multiple prizes. For Blackjack, a -p option should used exactly once with a <prize-id>=1." cr
  ."For Blackjack (and other games with arbitrary bids), <min-tickets>, <max-tickets> fields should not be used. <ticket-price> is used as a minimum size of a bid." 
} : usage()

// == Parsing command-line arguments

10000 constant TenK
{ TenK swap */r } : Percent*/
{ TenK * } : Percent*
{ (number) ?dup 0= abort"not a valid percentage" 1- ' Percent*/ ' Percent* cond } : parse-percent

0 =: GameFlags
0 =: StartTime
0xffffffff =: EndTime
1 =: MinTickets
0xffffffff =: MaxTickets
0 =: TicketPrice
0 =: InitialFund
0 =: RepeatCount
0 =: RepeatDelay
dictnew =: Prizes
{
  "-f" "--game-flags" 1 { parse-int =: GameFlags } option-long()
  "-s" "--start-time" 1 { parse-int =: StartTime } option-long()
  "-e" "--end-time" 1 { parse-int =: EndTime } option-long()
  "-n" "--min-tickets" 1 { parse-int =: MinTickets } option-long()
  "-x" "--max-tickets" 1 { parse-int =: MaxTickets } option-long()
  "-t" "--ticket-price" 1 { $>GR =: TicketPrice } option-long()
  "-i" "--initial-fund" 1 { $>GR =: InitialFund } option-long()
  "-c" "--repeat-count" 1 { parse-int =: RepeatCount } option-long()
  "-d" "--repeat-delay" 1 { parse-int =: RepeatDelay } option-long()
  "-p" "--prize" 3 { <b
    0 8 u,                    // prize-type, unused yet
    0 64 u,                   // prize-flags, unused yet
    rot $>GR Gram,            // fixed-amount
    swap parse-percent 32 u,  // prize-fund-percent
    swap parse-int // prize-id
    @' Prizes 32 b>udict! drop =: Prizes } option-long()
  "-l" "--lottery-prize" 6 { <b
    0 8 u,                      // prize-type, unused yet
    0 64 u,                     // prize-flags, unused yet
    5 roll $>GR Gram,           // fixed-amount
    4 roll parse-percent 32 u,  // prize-fund-percent
    3 roll parse-percent 32 u,  // per-prize-probability
    rot parse-int 32 u,         // ticket-count
    swap parse-percent 32 u,    // per-ticket-probability
    swap parse-int // prize-id
    @' Prizes 32 b>udict! drop =: Prizes } option-long()

  1 { =: BaseFile } nth-argument()
  2 { parse-int =: SeqNo } nth-argument()
  3 { parse-int =: GameId } nth-argument()
  4 { parse-int =: GameType } nth-argument()
} scan-args()
4 < { show-usage() } if // Checks that there's enough arguments

// == End of parsing command-line arguments

BaseFile +"-query" =:? SaveFile
BaseFile +".addr" load-address
2dup 2constant ContractAddr
."Contract address = " 2dup .addr cr 6 .Addr cr

BaseFile +".pk" load-keypair
=: PrivateKey
=: PublicKey

."Creating new game #" GameId . ."of type " GameType . cr

<b
  GameType 8 u,
  GameFlags 64 u,
  StartTime 32 u,
  EndTime 32 u,
  MinTickets 32 u,
  MaxTickets 32 u,
  0 32 u, // current number of tickets
  TicketPrice Gram,
  InitialFund Gram,
  RepeatCount 32 u,
  RepeatDelay 32 u,
  Prizes dict,
  dictnew dict, // Participants
  dictnew dict, // Results
  dictnew dict, // State
b> =: GameBody

// Pack the internal message into a request data structure to be signed
<b
  SeqNo 32 u,   // seqno
  -1 32 i,      // valid_until
  2 32 u,       // op, 2 = create game
  GameId 32 u,
  GameBody ref,
b> =: MessageBody

."Signing message: " MessageBody <s csr. cr

ContractAddr null
  MessageBody PrivateKey sign-message()
external-message() =: ExtMessage

."New external message: " ExtMessage <s csr. cr
ExtMessage 2 boc+>B dup Bx. cr
SaveFile +".boc" tuck B>file
."(Saved to file " type .")" cr