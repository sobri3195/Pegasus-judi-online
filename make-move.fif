#!/usr/bin/env fift -s
"gamble-utils.fif" include

{ ."<contract-addr> <key-name> <seqno> <game-id> <action> [-O <output-boc>]" cr
  ."Make a move <action> in a game <game-id> of contract with address <contract-addr>," cr
  ."signed by a key loaded from <key-name>.pk, and saves it into <output-boc>.boc ('move-query.boc' by default)." cr
  ."For a lottery, action=0 triggers a raffle if lottery is ended (after <end-time>)." cr
  ."For a game of Blackjack, action=0 is stand, and action=1 is hit."
} : usage()

// == Parsing command-line arguments

0 =: Action
{
  "-O" "--output-file" 1 { =: SaveFile } option-long()

  1 { =: ContractAddrRaw } nth-argument()
  2 { =: KeyName } nth-argument()
  3 { parse-int =: SeqNo } nth-argument()
  4 { parse-int =: GameId } nth-argument()
  5 { parse-int =: Action } nth-argument()
} scan-args()
4 < { show-usage() } if // Checks that there's enough arguments

// == End of parsing command-line arguments

"move-query" =:? SaveFile
true =: BounceFlag
ContractAddrRaw BounceFlag parse-load-address =: BounceFlag 2=: ContractAddr
."Contract address = " ContractAddr 2dup .addr cr 6 .Addr cr

KeyName +".pk" load-keypair
=: PrivateKey
=: PublicKey

."Creating a request to perform a move " Action . ."in a game #" GameId . cr

// Pack the internal message into a request data structure to be signed
<b
  SeqNo 32 u,   // seqno
  -1 32 i,      // valid_until
  102 32 u,     // op, 102 = make a move
  PublicKey B,
  GameId 32 u,
  Action 32 u,
b> =: MessageBody

."Signing message: " MessageBody <s csr. cr

ContractAddr null
  MessageBody PrivateKey sign-message()
external-message() =: ExtMessage

."New external message: " ExtMessage <s csr. cr
ExtMessage 2 boc+>B dup Bx. cr
SaveFile +".boc" tuck B>file
."(Saved to file " type .")" cr