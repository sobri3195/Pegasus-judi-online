#!/usr/bin/env fift -s
"common-utils.fif" include

{
  ."<old-data-boc> <message-boc> <grams> <src-addr> [<new-data-boc>] [-C <code-fif>]" cr
  ."Simulate sending an internal message to a smart contract."
} : usage()

// == Parsing command-line arguments

{
  "-C" "--code-file" 1 { +".fif" include =: Code } option-long()

  1 { =: OldDataFile } nth-argument()
  2 { =: MessageFile } nth-argument()
  3 { $>GR =: MessageValue } nth-argument()
  4 { true parse-load-address =: BounceFlag 2=: SrcAddr } nth-argument()
  5 { =: NewDataFile } nth-argument()
  no-more-arguments()
} scan-args()
4 < { show-usage() } if // Checks that there's enough arguments

// == End of parsing command-line arguments

"code-getters.fif" include =:? Code

OldDataFile +".boc" file>B B>boc =: OldData
."Old data: " cr OldData <s csr. cr
MessageFile +".boc" file>B B>boc =: Message
."Message: " cr Message <s csr. cr

<b
  2 4 u, // int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
  4 3 u, // addr_std$10 anycast:(Maybe Anycast)
  SrcAddr addr,
  // TODO: write other fields
b> =: MessageCell

MessageValue MessageCell Message <s recv_internal Code OldData runvm()

=: NewData
=: ExitCode

."Exit code: " ExitCode . cr
."Updated data: " cr NewData <s csr. cr

def? NewDataFile {
  NewData 2 boc+>B NewDataFile +".boc" B>file
} if